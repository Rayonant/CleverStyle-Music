// Generated by CoffeeScript 1.4.0

/**
 * @package     CleverStyle Music
 * @category    Web Components
 * @author      Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright   Copyright (c) 2014, Nazar Mokrynskyi
 * @license     MIT License, see license.txt
*/


(function() {

  document.webL10n.ready(function() {
    var $body, music_library, music_playlist, music_settings, player, scroll_interval, stop;
    $body = $('body');
    music_library = cs.music_library;
    music_playlist = cs.music_playlist;
    music_settings = cs.music_settings;
    player = document.querySelector('cs-music-player');
    scroll_interval = 0;
    stop = false;
    return Polymer('cs-music-library', {
      all_text: _('all-songs'),
      artists_text: _('artists'),
      albums_text: _('albums'),
      genres_text: _('genres'),
      years_text: _('years'),
      ratings_text: _('ratings'),
      list: [],
      open: function() {
        return this.list = [];
      },
      group: function(e) {
        var group_field;
        group_field = $(e.originalTarget).data('group-field');
        switch (group_field) {
          case 'artist':
          case 'album':
          case 'genre':
          case 'year':
          case 'rating':
            break;
          default:
            return music_library.get_all(function(all) {
              var i, value, _i, _len;
              for (i = _i = 0, _len = all.length; _i < _len; i = ++_i) {
                value = all[i];
                all[i] = value.id;
              }
              return music_playlist.set(all, function() {
                return player.next(function() {
                  return $body.removeClass('library menu');
                });
              });
            });
        }
      },
      play: function(e) {
        var _this = this;
        return music_playlist.current(function(old_id) {
          music_playlist.set_current(e.target.dataset.index);
          return music_playlist.current(function(id) {
            if (id !== old_id) {
              player.play(id);
              return _this.update(id);
            } else {
              player.play();
              return _this.update(id);
            }
          });
        });
      },
      update: function(new_id) {
        var _this = this;
        return this.list.forEach(function(data, index) {
          if (data.id === new_id) {
            _this.list[index].playing = 'yes';
            return _this.list[index].icon = cs.bus.state.player === 'playing' ? 'play' : 'pause';
          } else {
            _this.list[index].playing = 'no';
            return delete _this.list[index].icon;
          }
        });
      },
      back: function() {
        return $body.removeClass('library');
      }
    });
  });

}).call(this);
