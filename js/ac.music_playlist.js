// Generated by CoffeeScript 1.4.0

/**
 * @package     CleverStyle Music
 * @category    app
 * @author      Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright   Copyright (c) 2014, Nazar Mokrynskyi
 * @license     MIT License, see license.txt
*/


(function() {
  var music_library;

  music_library = cs.music_library;

  cs.music_playlist = {
    get_all: function(callback) {
      var playlist;
      callback = (callback || function() {}).bind(this);
      playlist = localStorage.playlist;
      if (playlist) {
        playlist = JSON.parse(playlist);
        if (playlist != null ? playlist.length : void 0) {
          callback(playlist);
          return;
        }
      }
      return this.refresh(function() {
        return this.get_all(callback);
      });
    },
    current: function(callback) {
      var playlist, position;
      callback = (callback || function() {}).bind(this);
      playlist = localStorage.playlist;
      if (playlist) {
        playlist = JSON.parse(playlist);
        if (playlist != null ? playlist.length : void 0) {
          position = localStorage.position || 0;
          if (position < playlist.length) {
            localStorage.position = position;
            callback(playlist[position]);
            return;
          }
        }
      }
      this.refresh(function() {
        return this.next(callback);
      });
    },
    set_current: function(position) {
      return localStorage.position = position;
    },
    set_current_id: function(id) {
      return this.get_all(function(all) {
        return localStorage.position = all.indexOf(id);
      });
    },
    prev: function(callback) {
      var playlist, position;
      callback = (callback || function() {}).bind(this);
      playlist = localStorage.playlist;
      if (playlist) {
        playlist = JSON.parse(playlist);
        if (playlist != null ? playlist.length : void 0) {
          position = localStorage.position || -1;
          if (position > 0) {
            --position;
            localStorage.position = position;
            callback(playlist[position]);
          }
        }
      }
    },
    next: function(callback) {
      var playlist, position;
      callback = (callback || function() {}).bind(this);
      playlist = localStorage.playlist;
      if (playlist) {
        playlist = JSON.parse(playlist);
        if (playlist != null ? playlist.length : void 0) {
          position = localStorage.position || -1;
          if (position < (playlist.length - 1)) {
            ++position;
            localStorage.position = position;
            callback(playlist[position]);
            return;
          } else if (cs.music_settings.repeat === 'none') {
            return;
          }
        }
      }
      this.refresh(function() {
        return this.next(callback);
      });
    },
    set: function(all, callback) {
      var _this = this;
      return this.sort(all, function(sorted) {
        localStorage.original_playlist = JSON.stringify(sorted);
        delete localStorage.playlist;
        return _this.refresh(callback);
      });
    },
    append: function(new_items, callback) {
      var original_playlist, playlist, save_playlist;
      original_playlist = JSON.parse(localStorage.original_playlist);
      original_playlist = original_playlist.concat(new_items).unique();
      this.sort(original_playlist, function(sorted) {
        return localStorage.original_playlist = JSON.stringify(sorted);
      });
      playlist = JSON.parse(localStorage.playlist);
      save_playlist = function(list) {
        playlist = playlist.concat(list).unique();
        localStorage.playlist = JSON.stringify(playlist);
        return callback();
      };
      if (cs.music_settings.shuffle) {
        return save_playlist(new_items);
      } else {
        return this.sort(new_items, function(sorted) {
          return save_playlist(sorted);
        });
      }
    },
    refresh: function(callback) {
      var playlist,
        _this = this;
      callback = (callback || function() {}).bind(this);
      playlist = JSON.parse(localStorage.original_playlist || '[]');
      if (playlist.length) {
        localStorage.playlist = JSON.stringify(playlist);
        delete localStorage.position;
        callback(playlist);
      } else {
        music_library.get_all(function(all) {
          var i, value, _i, _len;
          if (all.length) {
            for (i = _i = 0, _len = all.length; _i < _len; i = ++_i) {
              value = all[i];
              all[i] = value.id;
            }
            return _this.set(all, callback);
          } else if (confirm(_('library-empty-want-to-rescan'))) {
            $(document.body).addClass('library-rescan');
            return document.querySelector('cs-music-library-rescan').open();
          }
        });
      }
    },
    sort: function(all, callback) {
      var count, get_next_item, index, list,
        _this = this;
      index = 0;
      list = [];
      count = all.length;
      get_next_item = function() {
        var i, value, _i, _len;
        if (index < count) {
          return music_library.get_meta(all[index], function(data) {
            var artist_title;
            artist_title = [];
            if (data.artist) {
              artist_title.push(data.artist);
            }
            if (data.title) {
              artist_title.push(data.title);
            }
            artist_title = artist_title.join(' â€” ') || _('unknown');
            list.push({
              id: data.id,
              value: artist_title
            });
            data = null;
            artist_title = null;
            ++index;
            return get_next_item();
          });
        } else {
          list.sort(function(a, b) {
            a = a.value;
            b = b.value;
            if (a === b) {
              return 0;
            } else if (a < b) {
              return -1;
            } else {
              return 1;
            }
          });
          for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
            value = list[i];
            list[i] = value.id;
          }
          return callback(list);
        }
      };
      return get_next_item();
    }
  };

}).call(this);
