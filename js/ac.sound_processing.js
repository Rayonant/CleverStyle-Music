// Generated by CoffeeScript 1.4.0

/**
 * @package     CleverStyle Music
 * @category    app
 * @author      Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright   Copyright (c) 2014, Nazar Mokrynskyi
 * @license     MIT License, see license.txt
*/


(function() {
  var music_settings;

  window.AudioContext = AudioContext || webkitAudioContext;

  music_settings = cs.music_settings;

  cs.sound_processing = (function() {
    var create_equalizer, frequencies_to_control, frequencies_types, gain_levels, reverb_impulse_response_load, reverb_impulse_responses_files, update_equalizer;
    frequencies_to_control = [32, 64, 125, 250, 500, 1000, 2000, 4000, 8000, 16000];
    frequencies_types = ['lowshelf', 'lowshelf', 'lowshelf', 'peaking', 'peaking', 'peaking', 'peaking', 'highshelf', 'highshelf', 'highshelf'];
    gain_levels = music_settings.equalizer_gain_levels || [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    create_equalizer = function(audio) {
      var context, frequencies, frequency, index, source, _i, _len;
      context = audio.context;
      source = audio.source;
      frequencies = [];
      audio.frequencies = frequencies;
      for (index = _i = 0, _len = frequencies_to_control.length; _i < _len; index = ++_i) {
        frequency = frequencies_to_control[index];
        frequencies[index] = context.createBiquadFilter();
        frequencies[index].frequency.value = frequency;
        frequencies[index].type = frequencies_types[index];
        frequencies[index].gain.value = gain_levels[index];
        frequencies[index].Q.value = 1;
        source.connect(frequencies[index]);
        source = frequencies[index];
      }
      return source;
    };
    update_equalizer = function(audio) {
      var frequencies, frequency, index, _i, _len;
      frequencies = audio.frequencies;
      for (index = _i = 0, _len = frequencies_to_control.length; _i < _len; index = ++_i) {
        frequency = frequencies_to_control[index];
        frequencies[index].gain.value = gain_levels[index];
      }
    };
    reverb_impulse_responses_files = [];
    reverb_impulse_response_load = function(filename, callback) {
      var context, request, url;
      context = new AudioContext;
      url = "/audio/reverb_impulse_responses/" + filename + ".ogg";
      request = new XMLHttpRequest();
      request.open('GET', url, true);
      request.responseType = 'blob';
      request.onload = function() {
        var file_reader;
        file_reader = new FileReader();
        file_reader.onload = function() {
          return context.decodeAudioData(this.result, function(buffer) {
            if (!buffer) {
              callback();
              return;
            }
            callback(buffer);
          });
        };
        file_reader.readAsArrayBuffer(request.response);
      };
      request.send();
    };
    return {
      add_to_element: function(element) {
        var audio, compressor, reverb;
        audio = {};
        element.audio_processing = audio;
        audio.context = new AudioContext;
        audio.context.mozAudioChannelType = 'content';
        audio.source = audio.context.createMediaElementSource(element);
        audio.source = create_equalizer(audio);
        compressor = audio.context.createDynamicsCompressor();
        compressor.knee.value = 40;
        compressor.threshold.value = -10;
        compressor.ratio.value = 5;
        reverb = audio.context.createConvolver();
        audio.source.connect(compressor);
        audio.source = compressor;
        audio.source.connect(reverb);
        audio.source = reverb;
        return audio.source.connect(audio.context.destination);
      },
      update: function(element) {
        var audio;
        audio = element.audio_processing;
        return update_equalizer(audio);
      },
      get_gain_levels: function() {
        return gain_levels;
      },
      set_gain_levels: function(new_gain_levels) {
        gain_levels = new_gain_levels;
        music_settings.equalizer_gain_levels = new_gain_levels;
        return cs.bus.trigger('equalizer/update');
      }
    };
  })();

}).call(this);
